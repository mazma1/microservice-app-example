node {
  stage('git checkout') {
    git branch: 'deploy-k8s-gcp', url: 'https://github.com/mazma1/microservice-app-example'
  }

  stage('archive') {
    archiveArtifacts artifacts: '*, log-message-processor/'
  }

  stage('build image') {
    sh '''
      cd ${WORKSPACE}/log-message-processor
      REPO="log-message-processor"
      #Build container images using Dockerfile
      docker build --no-cache -t ${REPO}:${BUILD_NUMBER} .
    '''
  }

  stage('login to gcr') {
    withCredentials([string(credentialsId: 'GCLOUD-SERVICE-KEY', variable: 'GCLOUD_SERVICE_KEY')]) {
      sh '''
        echo $GCLOUD_SERVICE_KEY | base64 --decode --ignore-garbage > ${WORKSPACE}/gcloud-service-key.json
        docker login -u _json_key -p "$(cat ${WORKSPACE}/gcloud-service-key.json)" https://gcr.io
      '''
    }
  }

  stage('push image to GCR') {
    withCredentials([string(credentialsId: 'REGISTRY-URL', variable: 'REGISTRY_URL')]) {
      sh '''
        REG_ADDRESS="${REGISTRY_URL}"
        REPO="log-message-processor"
        #Tag the build with BUILD_NUMBER version
        docker tag ${REPO}:${BUILD_NUMBER} ${REG_ADDRESS}/${REPO}:${BUILD_NUMBER}
        #Publish image
        docker push ${REG_ADDRESS}/${REPO}:${BUILD_NUMBER}
      '''
    }
  }

  // stage('deploy to Kubernetes') {
  //   withCredentials([string(credentialsId: 'REGISTRY-URL', variable: 'REGISTRY_URL')]) {
  //     sh '''
  //       REPO="log-message-processor"
  //       NEW_SERVICE_IMAGE="${REGISTRY_URL}/${REPO}:${BUILD_NUMBER}"
  //       #Update the image of the log-message-processor container
  //       kubectl set image deployment/log-message-processor log-message-processor=${NEW_SERVICE_IMAGE}
  //     '''
  //   }
  // }
}